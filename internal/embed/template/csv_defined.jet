// Code generated by gen_csv_loader. DO NOT EDIT.

package {{.PackageName}}

import (
    "strconv"
    "strings"
    "time"
)

const ETimeLayout = "2006-1-2 15:04:05"

// 自定义类型必须实现自定义反序列化接口

// XTime 特性时间格式 1,05:00:00
type XTime struct {
    Day       int32 `property:"readonly"`
    Hour      int   `property:"readonly"`
    Minute    int   `property:"readonly"`
    Second    int   `property:"readonly"`
    TimeStamp int64 `property:"readonly"`
}

func (s *XTime) UnmarshalCSV(val string) error {
    var err error
    var day, h, m, sec int
    pos := strings.Index(val, ",")
    day, err = strconv.Atoi(val[:pos])
    if err != nil {
        panic(err)
    }
    timeItem := strings.Split(val[pos+1:], ":")
    h, err = strconv.Atoi(timeItem[0])
    if err != nil {
        panic(err)
    }
    m, err = strconv.Atoi(timeItem[1])
    if err != nil {
        panic(err)
    }
    sec, err = strconv.Atoi(timeItem[2])
    if err != nil {
        panic(err)
    }

    s.Day = int32(day)
    s.Hour = h
    s.Minute = m
    s.Second = sec
    s.TimeStamp = int64(day*24*3600 + h*3600 + m*60 + sec)
    return nil
}

// BEint32 []int32
type BEint32 struct {
    val      string  `property:"readonly"`
    ArrayInt []int32 `property:"readonly"`
}

func (s *BEint32) UnmarshalCSV(val string) error {
    var data int
    var err error
    s.val = val
    arrayString := strings.Split(val, "|")
    for i := range arrayString {
        if arrayString[i] == "" {
            continue
        } else {
            data, err = strconv.Atoi(arrayString[i])
            if err != nil {
                return err
            }
        }
        s.ArrayInt = append(s.ArrayInt, int32(data))
    }
    return nil
}

func (s *BEint32) MarshalJSON() ([]byte, error) {
    if s != nil {
        return []byte("\"" + s.val + "\""), nil
    } else {
        return nil, nil
    }
}

// BEfloat32 []float32
type BEfloat32 struct {
    ArrayFloat []float32 `property:"readonly"`
}

func (s *BEfloat32) UnmarshalCSV(val string) error {
    var err error
    var data float64
    arrayString := strings.Split(val, "|")
    for i := range arrayString {
        if arrayString[i] == "" {
            data = 0
        } else {
            data, err = strconv.ParseFloat(arrayString[i], 32)
            if err != nil {
                return err
            }
        }
        s.ArrayFloat = append(s.ArrayFloat, float32(data))
    }
    return nil
}

// BEstring []string
type BEstring struct {
    ArrayString []string `property:"readonly"`
}

func (s *BEstring) UnmarshalCSV(val string) error {
    s.ArrayString = strings.Split(val, "|")
    return nil
}

// BEint64 []int64
type BEint64 struct {
    val        string  `property:"readonly"`
    ArrayInt64 []int64 `property:"readonly"`
}

func (s *BEint64) UnmarshalCSV(val string) error {
    var data int
    var err error
    s.val = val
    arrayString := strings.Split(val, "|")
    for i := range arrayString {
        if arrayString[i] == "" {
            continue
        } else {
            data, err = strconv.Atoi(arrayString[i])
            if err != nil {
                return err
            }
        }
        s.ArrayInt64 = append(s.ArrayInt64, int64(data))
    }
    return nil
}

func (s *BEint64) MarshalJSON() ([]byte, error) {
    if s != nil {
        return []byte("\"" + s.val + "\""), nil
    } else {
        return nil, nil
    }
}

// STime 时间戳
type STime struct {
    Str       string `property:"readonly"`
    TimeStamp int64  `property:"readonly"`
    StampStr  []byte `property:"readonly"`
}

func (s *STime) UnmarshalCSV(val string) error {
    var err error
    var t time.Time
    t, err = time.Parse(ETimeLayout, val)
    if err != nil {
        return err
    }
    s.Str = val
    s.TimeStamp = t.Unix()
    s.StampStr = []byte(strconv.Itoa(int(s.TimeStamp)))
    return nil
}
func (s *STime) MarshalJSON() ([]byte, error) {
    if s != nil {
        return s.StampStr, nil
    } else {
        return nil, nil
    }
}

// CombineBEInt32 合并数组并累加  []int32{id,...}, []int32{num,...}   =>  [ [[id1,num1]], [[id1,num1],[id2,num2]], ]
type CombineBEInt32 struct {
    ArrayItem []map[int32]int32 `lua:"skip" property:"readonly"` // [ [第1级 map[id]num], [第1+2级 map[id]num]]
}

func (s *CombineBEInt32) UnmarshalCSV(val string) error {
    var dataId int
    var dataNum int
    var err error
    if val == "" {
        return nil
    }
    m := map[int32]int32{}
    arrayString := strings.Split(val, "|")
    length := len(arrayString)
    if length%2 != 0 {
        panic("invalid length:" + val)
    }
    halfLen := length / 2
    s.ArrayItem = make([]map[int32]int32, halfLen)
    for i := 0; i < halfLen; i++ {
        dataId, err = strconv.Atoi(arrayString[i])
        if err != nil {
            panic(err)
        }
        dataNum, err = strconv.Atoi(arrayString[i+halfLen])
        if err != nil {
            panic(err)
        }
        m[int32(dataId)] += int32(dataNum)
        s.ArrayItem[i] = m
        copyMap := map[int32]int32{}
        for k, v := range m {
            copyMap[k] = v
        }
        s.ArrayItem[i] = copyMap
    }
    return nil
}